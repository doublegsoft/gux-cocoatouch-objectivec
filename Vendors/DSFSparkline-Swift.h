// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef DSFSPARKLINE_SWIFT_H
#define DSFSPARKLINE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DSFSparkline",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)


@class NSCoder;

/// The core sparkline overlay class.
/// All sparkline renderers must inherit from this class
SWIFT_CLASS("_TtC12DSFSparkline19DSFSparklineOverlay")
@interface DSFSparklineOverlay : CALayer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

@class DSFSparklineStaticDataSource;

/// A data source that displays a static set of data, like for a pie chart
SWIFT_CLASS_NAMED("StaticDataSource")
@interface DSFSparklineOverlayStaticDataSource : DSFSparklineOverlay
/// The data to be displayed in this graph
/// The values become a percentage of the total value stored within the
/// dataStore, and as such each value ends up being drawn as a fraction of the total.
/// So for example, if you want the pie chart to represent the number of red cars vs. number of
/// blue cars, you just set the values directly.
@property (nonatomic, strong) DSFSparklineStaticDataSource * _Nonnull dataSource;
/// Datasource values
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull values;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
@end

enum DSFSparklineActivityGridLayoutStyle : NSInteger;
@class DSFSparklineActivityGridCellStyle;
@class DSFSparklineValueBasedFill;

/// A GitHub-style activity grid.
SWIFT_CLASS_NAMED("ActivityGrid")
@interface DSFSparklineOverlayActivityGrid : DSFSparklineOverlayStaticDataSource
/// The number of vertical cells in a column
@property (nonatomic) NSInteger verticalCellCount;
/// The number of horizontal cells in the grid.
/// If <code>horizontalCellCount</code> == 0, cells will be added to fill the entire width of the view
@property (nonatomic) NSInteger horizontalCellCount;
/// The layout style for the grid
@property (nonatomic) enum DSFSparklineActivityGridLayoutStyle layoutStyle;
/// The cell’s drawing style
@property (nonatomic, strong) DSFSparklineActivityGridCellStyle * _Nonnull cellStyle;
/// The color scheme to use when fill cells
@property (nonatomic, strong) DSFSparklineValueBasedFill * _Nonnull cellFillScheme;
/// The dimension of each cell
@property (nonatomic) CGFloat cellDimension;
/// The spacing between each of the cells
@property (nonatomic) CGFloat cellSpacing;
/// The color for the border of the cell
@property (nonatomic) CGColorRef _Nullable cellBorderColor;
/// The cell’s border width
@property (nonatomic) CGFloat cellBorderWidth;
/// The cell’s corner radius
@property (nonatomic) CGFloat cellCornerRadius;
/// Called when the activity cells are updated
@property (nonatomic, copy) void (^ _Nullable cellsDidUpdateBlock)(void);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
@end


@interface DSFSparklineOverlayActivityGrid (SWIFT_EXTENSION(DSFSparkline))
/// Returns the index within the datasource of the value at the given point
/// \param point The point within the activity grid to test
///
///
/// returns:
/// The data source index for the point, or -1 if
/// 1. no cell was hit, or
/// 2. The cell was a skip cell (ie. its value is <code>.infinity</code>, or
/// 3. the cell hit was outside of bounds of the data source
- (NSInteger)indexAtPoint:(CGPoint)point SWIFT_WARN_UNUSED_RESULT;
/// Return the cell frame for the given index
/// \param index The index
///
///
/// returns:
/// The cell bounds for the given index
- (CGRect)cellFrameFor:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@end


@interface DSFSparklineOverlayActivityGrid (SWIFT_EXTENSION(DSFSparkline))
/// The expected height given the current settings
@property (nonatomic, readonly) CGFloat intrinsicHeight;
/// Minimum width for displaying the current values without padding
@property (nonatomic, readonly) CGFloat intrinsicWidth;
/// Intrinsic size for the grid
@property (nonatomic, readonly) CGSize intrinsicSize;
@end



SWIFT_CLASS("_TtC12DSFSparkline19DSFSparklineSurface")
@interface DSFSparklineSurface : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A surface for drawing a sparkline into an image
SWIFT_CLASS_NAMED("Bitmap")
@interface DSFSparklineSurfaceBitmap : DSFSparklineSurface
/// Add a sparkline overlay to the surface
- (void)addOverlay:(DSFSparklineOverlay * _Nonnull)overlay;
/// Return a CGImage representation of the sparklline
/// \param size The dimension in pixels
///
/// \param scale The scale to use (eg. retina == 2)
///
///
/// returns:
/// A CGImage representation, or nil if the image couldn’t be generated
- (CGImageRef _Nullable)cgImageWithSize:(CGSize)size scale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSTextAttachment;

@interface DSFSparklineSurfaceBitmap (SWIFT_EXTENSION(DSFSparkline))
/// Returns an NSTextAttachment containing an image of the sparkline
/// \param size The dimensions of the image
///
/// \param scale The scale for the returned image. For example, for a retina scale (144dpi) image, scale == 2
///
///
/// returns:
/// An NSTextAttachment containing the sparkline bitmap, or nil if the bitmap couldn’t be generated
- (NSTextAttachment * _Nullable)textAttachment:(CGSize)size :(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
@end

@class NSAttributedString;

@interface DSFSparklineSurfaceBitmap (SWIFT_EXTENSION(DSFSparkline))
/// Returns an NSAttributedString containing an image of the sparkline
/// \param size The dimensions of the image
///
/// \param scale The scale for the returned image. For example, for a retina scale (144dpi) image, scale == 2
///
///
/// returns:
/// An NSAttributedString containing the sparkline bitmap, or nil if the bitmap couldn’t be generated
- (NSAttributedString * _Nullable)attributedString:(CGSize)size :(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
@end


@class UIImage;

@interface DSFSparklineSurfaceBitmap (SWIFT_EXTENSION(DSFSparkline))
/// Generate an NSImage with the contents of the surface
/// \param size The dimensions of the image
///
/// \param scale The scale for the returned image. For example, for a retina scale (144dpi) image, scale == 2
///
///
/// returns:
/// The created image, or nil if something went wrong
- (UIImage * _Nullable)imageWithSize:(CGSize)size scale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
/// Generate an NSImage with the contents of the surface
/// \param width The width of the resultant image
///
/// \param height The height of the resultant image
///
/// \param scale The scale for the returned image. For example, for a retina scale (144dpi) image, scale == 2
///
///
/// returns:
/// The created image, or nil if something went wrong
- (UIImage * _Nullable)imageWithWidth:(CGFloat)width height:(CGFloat)height scale:(CGFloat)scale SWIFT_WARN_UNUSED_RESULT;
@end






@class DSFSparklineOverlayCircularGaugeTrackStyle;
@class AnimationStyle;

/// A circular gauge
SWIFT_CLASS_NAMED("CircularGauge")
@interface DSFSparklineOverlayCircularGauge : DSFSparklineOverlay
/// The default track style
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DSFSparklineOverlayCircularGaugeTrackStyle * _Nonnull DefaultTrackStyle;)
+ (DSFSparklineOverlayCircularGaugeTrackStyle * _Nonnull)DefaultTrackStyle SWIFT_WARN_UNUSED_RESULT;
/// The default value style
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DSFSparklineOverlayCircularGaugeTrackStyle * _Nonnull DefaultLineStyle;)
+ (DSFSparklineOverlayCircularGaugeTrackStyle * _Nonnull)DefaultLineStyle SWIFT_WARN_UNUSED_RESULT;
/// The value assigned to the percent bar. A value between 0.0 and 1.0
@property (nonatomic) CGFloat value;
/// The style to use when drawing the gauge’s track
@property (nonatomic, strong) DSFSparklineOverlayCircularGaugeTrackStyle * _Nonnull trackStyle;
/// The style to use when drawing the gauge’s value
@property (nonatomic, strong) DSFSparklineOverlayCircularGaugeTrackStyle * _Nonnull lineStyle;
/// The animation style to apply
@property (nonatomic, strong) AnimationStyle * _Nullable animationStyle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
@end


@interface DSFSparklineOverlayCircularGauge (SWIFT_EXTENSION(DSFSparkline))
@end

@protocol DSFSparklineFillable;
@class Shadow;

/// A circular gauge track style
SWIFT_CLASS_NAMED("TrackStyle")
@interface DSFSparklineOverlayCircularGaugeTrackStyle : NSObject
/// The width of the track
@property (nonatomic) CGFloat width;
/// The fill style to use
@property (nonatomic, strong) id <DSFSparklineFillable> _Nonnull fillColor;
/// The stroke width
@property (nonatomic) CGFloat strokeWidth;
/// The stroke color
@property (nonatomic) CGColorRef _Nullable strokeColor;
/// The shadow to use
@property (nonatomic, strong) Shadow * _Nullable shadow;
/// The line’s cap style
@property (nonatomic) CGLineCap lineCap;
/// Create
- (nonnull instancetype)initWithWidth:(CGFloat)width fillColor:(id <DSFSparklineFillable> _Nonnull)fillColor strokeWidth:(CGFloat)strokeWidth strokeColor:(CGColorRef _Nullable)strokeColor shadow:(Shadow * _Nullable)shadow lineCap:(CGLineCap)lineCap OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC12DSFSparkline12DSFSparkline")
@interface DSFSparkline : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface DSFSparkline (SWIFT_EXTENSION(DSFSparkline))
@end


/// A simple data source containing an array of values.
SWIFT_CLASS_NAMED("StaticDataSource")
@interface DSFSparklineStaticDataSource : NSObject
/// The total of all the values within the datasource, excluding .infinite values
@property (nonatomic, readonly) CGFloat total;
/// Create an empty data source
- (nonnull instancetype)init;
/// Create a data source with the specified values
/// \param values The datasource values
///
- (nonnull instancetype)init:(NSArray<NSNumber *> * _Nonnull)values OBJC_DESIGNATED_INITIALIZER;
/// Create a static data source with values and upper/lower bounds values
/// \param values The values to be displayed
///
/// \param lowerBound The lower bounds of the data
///
/// \param upperBound The upper bounds of the data
///
- (nonnull instancetype)init:(NSArray<NSNumber *> * _Nonnull)values lowerBound:(CGFloat)lowerBound upperBound:(CGFloat)upperBound;
/// Return the fractional (0 … 1) value for the specified value, or .infinity if the value is infinite
/// \param value The value to convert to a fractional value within the range of the datasource
///
///
/// returns:
/// A fractional value, or nil when value == .infinity
- (CGFloat)fractionalValueFor:(CGFloat)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface DSFSparkline (SWIFT_EXTENSION(DSFSparkline))
@end


/// A datasource for a sparkline
SWIFT_CLASS_NAMED("DataSource")
@interface DSFSparklineDataSource : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface DSFSparkline (SWIFT_EXTENSION(DSFSparkline))
@end


SWIFT_CLASS("_TtCC12DSFSparkline12DSFSparkline10PercentBar")
@interface PercentBar : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumberFormatter;
@class UIFont;
@class NSString;

/// Percent Bar style class. Assigned values should be in the range 0 … 1
SWIFT_CLASS_NAMED("Style")
@interface DSFSparklinePercentBarStyle : NSObject
/// The corner radius for the bar/underbar
@property (nonatomic) CGFloat cornerRadius;
/// The graph background color
@property (nonatomic) CGColorRef _Nonnull underBarColor;
/// The color of text when drawn on the background
@property (nonatomic) CGColorRef _Nonnull underBarTextColor;
/// The color of the value bar
@property (nonatomic) CGColorRef _Nonnull barColor;
/// The color of text when drawn on top of the bar
@property (nonatomic) CGColorRef _Nonnull barTextColor;
/// The formatter to use
@property (nonatomic, strong) NSNumberFormatter * _Nonnull numberFormatter;
/// The font to use
@property (nonatomic, strong) UIFont * _Nonnull font;
/// How much to inset the value bar from the bounds of the control
@property (nonatomic) UIEdgeInsets barEdgeInsets;
/// Should we display a text percentage value on the bar?
@property (nonatomic) BOOL showLabel;
- (NSString * _Nonnull)labelFor:(CGFloat)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface DSFSparkline (SWIFT_EXTENSION(DSFSparkline))
@end

@class DSFGradientBucketPost;

/// A class that represents buckets of color within a gradient within the RGB colorspace.
/// Defines a smooth transition between colors.
/// <em>Buckets</em>
/// A gradient object can also be ‘bucketed’, so that rather than a smooth transition the gradient output is
/// broken up into equal buckets containing a color
SWIFT_CLASS_NAMED("GradientBucket")
@interface DSFGradientBucket : NSObject
/// The number of buckets to create. If 0 or 1, the gradient is smooth.
@property (nonatomic) NSUInteger bucketCount;
/// Create a gradient
/// \param posts The color ‘posts’ within the gradient
///
- (nonnull instancetype)initWithPosts:(NSArray<DSFGradientBucketPost *> * _Nonnull)posts bucketCount:(NSUInteger)bucketCount OBJC_DESIGNATED_INITIALIZER;
/// Make a copy of the gradient bucket
- (DSFGradientBucket * _Nonnull)copyGradientBucket SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface DSFSparkline (SWIFT_EXTENSION(DSFSparkline))
@end

@class UIColor;

/// Grid lines definition
SWIFT_CLASS_NAMED("GridLinesDefinition")
@interface DSFSparklineGridLinesDefinition : NSObject
/// Grid lines color
@property (nonatomic, readonly, strong) UIColor * _Nonnull color;
/// Grid lines width
@property (nonatomic, readonly) CGFloat width;
/// The dash style to use when drawing
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull dashStyle;
/// The positions to draw the gridlines for the data source
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull values;
/// Create a grid lines definition
/// \param color The color of the grid lines
///
/// \param width The width to draw the grid lines
///
/// \param dashStyle The dash style for the grid lines
///
/// \param values The positions to draw the gridlines for the data source
///
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color width:(CGFloat)width dashStyle:(NSArray<NSNumber *> * _Nonnull)dashStyle values:(NSArray<NSNumber *> * _Nonnull)values OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface DSFSparkline (SWIFT_EXTENSION(DSFSparkline))
@end


/// A highlight range definition
SWIFT_CLASS_NAMED("HighlightRangeDefinition")
@interface DSFSparklineHighlightRangeDefinition : NSObject
/// The highlight fill to use
@property (nonatomic, strong) id <DSFSparklineFillable> _Nonnull fill;
/// Objective-C compatible initializer. Lowerbound MUST be less than upperbound!
- (nonnull instancetype)initWithLowerBound:(CGFloat)lowerBound upperBound:(CGFloat)upperBound fill:(id <DSFSparklineFillable> _Nonnull)fill OBJC_DESIGNATED_INITIALIZER;
/// Objective-C compatible initializer. Lowerbound MUST be less than upperbound!
- (nonnull instancetype)initWithLowerBound:(CGFloat)lowerBound upperBound:(CGFloat)upperBound fillColor:(CGColorRef _Nonnull)fillColor OBJC_DESIGNATED_INITIALIZER;
- (DSFSparklineHighlightRangeDefinition * _Nonnull)copyHighlightRangeDefinition SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface DSFSparkline (SWIFT_EXTENSION(DSFSparkline))
@end


/// The palette to use when drawing the pie. The first value in the datasource uses the first color,
/// the second the second color etc.  If there are more datapoints than colors (you shouldn’t do this!) then
/// the chart will start back at the start of the palette.
/// These palettes can be safely shared between multiple pie views
SWIFT_CLASS_NAMED("Palette")
@interface DSFSparklinePalette : NSObject
/// The colors to be used when drawing segments
@property (nonatomic, readonly, copy) NSArray<UIColor *> * _Nonnull colors;
@property (nonatomic, readonly, strong) NSArray * _Nonnull cgColors;
/// A default palette used when no palette is specified.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DSFSparklinePalette * _Nonnull shared;)
+ (DSFSparklinePalette * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// A default palette used when no palette is specified
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DSFSparklinePalette * _Nonnull sharedGrays;)
+ (DSFSparklinePalette * _Nonnull)sharedGrays SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(NSArray<UIColor *> * _Nonnull)colors OBJC_DESIGNATED_INITIALIZER;
- (DSFSparklinePalette * _Nonnull)copyPalette SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface DSFSparkline (SWIFT_EXTENSION(DSFSparkline))
@end


/// A fill color that can change depending on a value
SWIFT_CLASS_NAMED("ValueBasedFill")
@interface DSFSparklineValueBasedFill : NSObject
/// Is this a simple flat color?
@property (nonatomic, readonly) BOOL isFlatColor;
/// Is this a color palette?
@property (nonatomic, readonly) BOOL isPalette;
/// Is this a gradient?
@property (nonatomic, readonly) BOOL isGradient;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DSFSparklineValueBasedFill * _Nonnull sharedPalette;)
+ (DSFSparklineValueBasedFill * _Nonnull)sharedPalette SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFlatColor:(CGColorRef _Nonnull)flatColor OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithPalette:(DSFSparklinePalette * _Nonnull)palette OBJC_DESIGNATED_INITIALIZER;
/// Create a fill object containing an array of colors
/// \param colors The colors
///
- (nonnull instancetype)initWithColors:(NSArray<UIColor *> * _Nonnull)colors;
- (nonnull instancetype)initWithGradient:(DSFGradientBucket * _Nonnull)gradient OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface DSFSparkline (SWIFT_EXTENSION(DSFSparkline))
@end


/// Drawing definition for the zero-line operations
SWIFT_CLASS_NAMED("ZeroLineDefinition")
@interface DSFSparklineZeroLineDefinition : NSObject
- (DSFSparklineZeroLineDefinition * _Nonnull)copyZeroLineDefinition SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface DSFSparkline (SWIFT_EXTENSION(DSFSparkline))
@end

@class NSShadow;

/// A shadow object
SWIFT_CLASS("_TtCC12DSFSparkline12DSFSparkline6Shadow")
@interface Shadow : NSObject
/// Create a new shadow object
- (nonnull instancetype)init:(NSShadow * _Nonnull)shadow isInner:(BOOL)isInner OBJC_DESIGNATED_INITIALIZER;
/// Create a new shadow object
- (nonnull instancetype)initWithBlurRadius:(CGFloat)blurRadius offset:(CGSize)offset color:(CGColorRef _Nonnull)color isInner:(BOOL)isInner;
/// Shadow offset
@property (nonatomic) CGSize offset;
/// Shadow color
@property (nonatomic) CGColorRef _Nullable color;
/// Shadow blur radius
@property (nonatomic) CGFloat blurRadius;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface DSFSparkline (SWIFT_EXTENSION(DSFSparkline))
@end

/// Animation function types
typedef SWIFT_ENUM(NSInteger, AnimatorFunctionType, closed) {
  AnimatorFunctionTypeLinear = 0,
  AnimatorFunctionTypeEaseInEaseOut = 1,
};


/// An animation style
SWIFT_CLASS("_TtCC12DSFSparkline12DSFSparkline14AnimationStyle")
@interface AnimationStyle : NSObject
@property (nonatomic, readonly) CGFloat duration;
@property (nonatomic, readonly) enum AnimatorFunctionType function;
- (nonnull instancetype)initWithDuration:(CGFloat)duration function:(enum AnimatorFunctionType)function OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A surface for drawing a sparkline into a view.
/// Represents the generic base class for a view.
SWIFT_CLASS("_TtC12DSFSparkline23DSFSparklineSurfaceView")
@interface DSFSparklineSurfaceView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC12DSFSparkline28DSFSparklineActivityGridView")
@interface DSFSparklineActivityGridView : DSFSparklineSurfaceView
/// The view’s data source
@property (nonatomic, strong) DSFSparklineStaticDataSource * _Nonnull dataSource;
/// Set the values for the data source
/// \param values The values
///
- (void)setValues:(NSArray<NSNumber *> * _Nonnull)values;
/// Set the values and supported range for the data source
/// \param values The values
///
/// \param lowerBound The acceptable lower bounds for the input data
///
/// \param upperBound The acceptable upper bounds for the input data
///
- (void)setValues:(NSArray<NSNumber *> * _Nonnull)values lowerBound:(CGFloat)lowerBound upperBound:(CGFloat)upperBound;
/// The layout style for the grid
@property (nonatomic, strong) DSFSparklineActivityGridCellStyle * _Nonnull cellStyle;
/// The layout style for the grid
@property (nonatomic) enum DSFSparklineActivityGridLayoutStyle layoutStyle;
/// The number of vertical cells in a column
@property (nonatomic) NSUInteger verticalCellCount;
/// The number of horizontal cells in a column.
@property (nonatomic) NSUInteger horizontalCellCount;
/// The color scheme to use when filling cells
@property (nonatomic, strong) DSFSparklineValueBasedFill * _Nonnull cellFillScheme;
/// The dimension of each cell
@property (nonatomic) CGFloat cellDimension;
/// The spacing between each of the cells
@property (nonatomic) CGFloat cellSpacing;
/// The border color for each individual cell
@property (nonatomic, strong) UIColor * _Nullable cellBorderColor;
/// The cell’s border width
@property (nonatomic) CGFloat cellBorderWidth;
/// The cell’s corner radius
@property (nonatomic) CGFloat cellCornerRadius;
/// A block called to retrieve the tooltip text for a specific cell index
@property (nonatomic, copy) NSString * _Nullable (^ _Nullable cellTooltipString)(NSInteger);
/// Initializer
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (void)layoutSubviews;
@end




/// A Sparkline View with an attached datasource.
SWIFT_CLASS("_TtC12DSFSparkline26DSFSparklineDataSourceView")
@interface DSFSparklineDataSourceView : DSFSparklineSurfaceView
/// The source of data for the sparkline
@property (nonatomic, weak) DSFSparklineDataSource * _Nullable dataSource;
@property (nonatomic, strong) UIColor * _Nonnull graphColor;
/// The size of the sparkline window
/// This member is purely IBDesignable display related
/// <code>windowSize</code> on the dataSource
@property (nonatomic) NSUInteger graphWindowSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A view that can draw a zero-point line. Should never be used directly, just to inherit from for other graph types
SWIFT_CLASS("_TtC12DSFSparkline29DSFSparklineZeroLineGraphView")
@interface DSFSparklineZeroLineGraphView : DSFSparklineDataSourceView
/// Draw a dotted line at the zero point on the y-axis
@property (nonatomic) BOOL zeroLineVisible;
@property (nonatomic, strong) UIColor * _Nonnull zeroLineColor;
/// The width of the dotted line at the zero point on the y-axis
@property (nonatomic) CGFloat zeroLineWidth;
/// The line style for the dotted line. Use [] to specify a solid line.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull zeroLineDashStyle;
/// A string representation of the line dash lengths for the zero line, eg. “1,3,4,2”. If you want a solid line, specify “-”
/// Primarily used for Interface Builder integration
@property (nonatomic, copy) NSString * _Nonnull zeroLineDashStyleString;
/// The color used to draw values below the zero line. If nil, is the same as the graph color
@property (nonatomic, strong) UIColor * _Nullable lowerGraphColor;
/// Draw a highlight for a range on the graph
@property (nonatomic) BOOL highlightRangeVisible;
@property (nonatomic, strong) UIColor * _Nonnull highlightRangeColor;
/// A string of the format “0.1,0.7”
@property (nonatomic, copy) NSString * _Nullable highlightRangeString;
/// Draw a dotted line at the zero point on the y-axis
@property (nonatomic) BOOL gridLinesVisible;
/// The y-values on the graph with a grid line
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull gridLinesValues;
/// A string of the format “0.1,0.7”
@property (nonatomic, copy) NSString * _Nullable gridLinesValuesString;
@property (nonatomic, strong) UIColor * _Nonnull gridLinesColor;
/// The width of the dotted line at the zero point on the y-axis
@property (nonatomic) CGFloat gridLinesWidth;
/// The line style for the dotted line. Use [] to specify a solid line.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull gridLinesDashStyle;
/// A string representation of the line dash lengths for grid lines, eg. “1,3,4,2”. If you want a solid line, specify “-”
/// Primarily used for Interface Builder integration
@property (nonatomic, copy) NSString * _Nonnull gridLinesDashStyleString;
/// Set the grid line definition for the graph
- (void)setGridLineDefinition:(DSFSparklineGridLinesDefinition * _Nonnull)gridLineDefinition;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSArray<DSFSparklineHighlightRangeDefinition *> * _Nonnull highlightRangeDefinition;
@end


/// A sparkline graph that displays bars
SWIFT_CLASS("_TtC12DSFSparkline24DSFSparklineBarGraphView")
@interface DSFSparklineBarGraphView : DSFSparklineZeroLineGraphView
/// The line width (in pixels) to use when drawing the border of each bar
@property (nonatomic) NSUInteger lineWidth;
/// The spacing (in pixels) between each bar
@property (nonatomic) NSUInteger barSpacing;
/// Draw a shadow under the line
@property (nonatomic) BOOL shadowed;
/// Should the graph be centered at the zero line?
@property (nonatomic) BOOL centeredAtZeroLine;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// A circular gauge
SWIFT_CLASS("_TtC12DSFSparkline29DSFSparklineCircularGaugeView")
@interface DSFSparklineCircularGaugeView : DSFSparklineSurfaceView
/// The value to display (0 … 1)
@property (nonatomic) CGFloat value;
/// The style to use when drawing the gauge’s track
@property (nonatomic, strong) DSFSparklineOverlayCircularGaugeTrackStyle * _Nonnull trackStyle;
/// The width of the track
@property (nonatomic) CGFloat trackWidth;
/// Track color
@property (nonatomic, strong) UIColor * _Nonnull trackColor;
/// The style to use when drawing the gauge’s value
@property (nonatomic, strong) DSFSparklineOverlayCircularGaugeTrackStyle * _Nonnull lineStyle;
/// The width of the track
@property (nonatomic) CGFloat lineWidth;
/// Line color
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
/// The animation style to use when the value changes
@property (nonatomic, strong) AnimationStyle * _Nullable animationStyle;
/// Create
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Create
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC12DSFSparkline32DSFSparklineCircularProgressView")
@interface DSFSparklineCircularProgressView : DSFSparklineSurfaceView
@property (nonatomic) CGFloat value;
@property (nonatomic) CGFloat trackWidth;
/// The padding (inset) for drawing the ring
@property (nonatomic) CGFloat padding;
/// The stroke color for the pie chart
@property (nonatomic, strong) UIColor * _Nullable trackColor;
/// The stroke color for the pie chart
@property (nonatomic, strong) UIColor * _Nullable progressColor;
/// The track’s icon
@property (nonatomic) CGImageRef _Nullable trackIcon;
/// The fill color for the value ring
@property (nonatomic, strong) id <DSFSparklineFillable> _Nonnull fillStyle;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




/// A sparkline that draws a simple pie chart
SWIFT_CLASS("_TtC12DSFSparkline28DSFSparklineDataBarGraphView")
@interface DSFSparklineDataBarGraphView : DSFSparklineSurfaceView
/// The data to be displayed in the data bar.
/// The values become a percentage of the total value stored within the
/// dataStore, and as such each value ends up being drawn as a fraction of the total.
/// So for example, if you want the pie chart to represent the number of red cars vs. number of
/// blue cars, you just set the values directly.
@property (nonatomic, strong) DSFSparklineStaticDataSource * _Nonnull dataSource;
/// The maximum <em>total</em> value. If the datasource values total is greater than this value, it clips the display
@property (nonatomic) CGFloat maximumTotalValue;
/// The ‘undrawn’ color for the graph
@property (nonatomic, strong) UIColor * _Nullable unsetColor;
/// The stroke color for the pie chart
@property (nonatomic, strong) UIColor * _Nullable strokeColor;
/// The width of the stroke line
@property (nonatomic) CGFloat lineWidth;
/// The animation style to apply when datasource changes, or nil for no animation
@property (nonatomic, strong) AnimationStyle * _Nullable animationStyle;
/// The palette to use when drawing the pie chart
@property (nonatomic, strong) DSFSparklinePalette * _Nonnull palette;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




@interface DSFSparklineDataSourceView (SWIFT_EXTENSION(DSFSparkline))
- (void)drawRect:(CGRect)rect;
@end


/// A sparkline graph that displays dots (like the CPU history graph in Activity Monitor)
SWIFT_CLASS("_TtC12DSFSparkline24DSFSparklineDotGraphView")
@interface DSFSparklineDotGraphView : DSFSparklineDataSourceView
/// Are the values drawn from the top down?
@property (nonatomic) BOOL upsideDown;
/// The number of vertical buckets to break the input data up into
@property (nonatomic) NSUInteger verticalDotCount;
@property (nonatomic, strong) UIColor * _Nonnull unsetGraphColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// A protocol definition for objects that can ‘fill’ a rectangle within a context with a color/gradient/pattern etc
SWIFT_PROTOCOL("_TtP12DSFSparkline20DSFSparklineFillable_")
@protocol DSFSparklineFillable <NSObject>
- (void)fillWithContext:(CGContextRef _Nonnull)context bounds:(CGRect)bounds;
- (id <DSFSparklineFillable> _Nonnull)copyFill SWIFT_WARN_UNUSED_RESULT;
- (CGColorRef _Nonnull)colorAt:(CGFloat)fractionalValue SWIFT_WARN_UNUSED_RESULT;
@end

@class DSFSparklineOverlayLineMarker;

/// A sparkline that draws a line graph
SWIFT_CLASS("_TtC12DSFSparkline25DSFSparklineLineGraphView")
@interface DSFSparklineLineGraphView : DSFSparklineZeroLineGraphView
/// The width for the line drawn on the graph
@property (nonatomic) CGFloat lineWidth;
/// Interpolate a curve between the points
@property (nonatomic) BOOL interpolated;
/// Shade the area under the line
@property (nonatomic) BOOL lineShading;
/// Draw a shadow under the line
@property (nonatomic) BOOL shadowed;
/// The size of the markers to draw. If the markerSize is less than 0, markers will not draw
@property (nonatomic) CGFloat markerSize;
/// An optional drawing function for custom drawing markers. When nil, uses the standard circle for each marker
/// The <code>markerSize</code> value is used to determine the frameSize of each marker.
/// If <code>markerSize</code> is less than 1, this block will not be called.
/// Note that this function is called very frequently so make sure its performant!
@property (nonatomic, copy) void (^ _Nullable markerDrawingBlock)(CGContextRef _Nonnull, NSArray<DSFSparklineOverlayLineMarker *> * _Nonnull);
/// Should the graph be centered at the zero line?
@property (nonatomic) BOOL centeredAtZeroLine;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end


/// A pie graph
SWIFT_CLASS_NAMED("WiperGauge")
@interface DSFSparklineOverlayWiperGauge : DSFSparklineOverlayStaticDataSource
/// The value to display in the gauge
@property (nonatomic) CGFloat value;
/// The palette to use when drawing the value part of the gauge
@property (nonatomic, strong) DSFSparklineValueBasedFill * _Nonnull valueColor;
/// The palette to use when drawing the unset value part of the gauge
@property (nonatomic) CGColorRef _Nonnull valueBackgroundColor;
/// The color to draw the dial and outer border
@property (nonatomic) CGColorRef _Nonnull gaugeUpperArcColor;
/// The color to draw the value in radial component
@property (nonatomic) CGColorRef _Nonnull gaugePointerColor;
/// The color to draw in the background
@property (nonatomic) CGColorRef _Nullable gaugeBackgroundColor;
/// Should the pie chart animate in?
@property (nonatomic, strong) AnimationStyle * _Nullable animationStyle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
@end


@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end


/// An overlay that contains a DSFSparklineDataSource.
/// Generally you don’t create one of these yourself, you subclass it
SWIFT_CLASS_NAMED("DataSource")
@interface DSFSparklineDataSourceOverlay : DSFSparklineOverlay
/// The datasource for displaying the overlay
@property (nonatomic, strong) DSFSparklineDataSource * _Nullable dataSource;
- (nonnull instancetype)initWithDataSource:(DSFSparklineDataSource * _Nullable)dataSource OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("WinLossTie")
@interface DSFSparklineOverlayWinLossTie : DSFSparklineDataSourceOverlay
/// The width of the stroke for the tablet
@property (nonatomic) NSUInteger lineWidth;
/// The spacing (in pixels) between each bar
@property (nonatomic) NSUInteger barSpacing;
/// The color to draw the ‘win’ boxes
@property (nonatomic) CGColorRef _Nonnull winStroke;
/// The color to draw the ‘win’ boxes
@property (nonatomic, strong) id <DSFSparklineFillable> _Nullable winFill;
/// The color to draw the ‘loss’ boxes
@property (nonatomic) CGColorRef _Nonnull lossStroke;
/// The color to draw the ‘loss’ boxes
@property (nonatomic, strong) id <DSFSparklineFillable> _Nullable lossFill;
/// The color to draw the ‘tie’ boxes
@property (nonatomic) CGColorRef _Nullable tieStroke;
/// The color to draw the ‘tie’ boxes
@property (nonatomic, strong) id <DSFSparklineFillable> _Nullable tieFill;
/// The line to separate the win and loss sections of the sparkline
@property (nonatomic, strong) DSFSparklineZeroLineDefinition * _Nullable centerLine;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDataSource:(DSFSparklineDataSource * _Nullable)dataSource SWIFT_UNAVAILABLE;
@end


@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end


/// A tablet-style graph.
SWIFT_CLASS_NAMED("Tablet")
@interface DSFSparklineOverlayTablet : DSFSparklineDataSourceOverlay
/// The width of the stroke for the tablet
@property (nonatomic) CGFloat lineWidth;
/// The spacing (in pixels) between each tablet
@property (nonatomic) CGFloat tabletSpacing;
/// The color to draw the win tablets
@property (nonatomic) CGColorRef _Nonnull winStrokeColor;
/// The color to draw the ‘win’ boxes
@property (nonatomic, strong) id <DSFSparklineFillable> _Nullable winFill;
/// The color to draw the win tablets
@property (nonatomic) CGColorRef _Nonnull lossStrokeColor;
/// The color to draw the ‘win’ boxes
@property (nonatomic, strong) id <DSFSparklineFillable> _Nullable lossFill;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDataSource:(DSFSparklineDataSource * _Nullable)dataSource SWIFT_UNAVAILABLE;
@end


@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end


SWIFT_CLASS_NAMED("Stripes")
@interface DSFSparklineOverlayStripes : DSFSparklineDataSourceOverlay
/// The width of the stroke for the tablet
@property (nonatomic) BOOL integral;
/// The spacing (in pixels) between each bar
@property (nonatomic) NSUInteger barSpacing;
/// The color gradient to use when rendering.
/// Note that transparent gradients display strangely and not as I would expect them to.
/// Stick with solid colors in your gradient for the current time.
@property (nonatomic, strong) DSFGradientBucket * _Nonnull gradient;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDataSource:(DSFSparklineDataSource * _Nullable)dataSource SWIFT_UNAVAILABLE;
@end


@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end


/// A graph that can be centered around the datasource’s zero-line.
/// You don’t generally create this class yourself, you inherit from it if your overlay type can be
/// centered around the zero-line of the data.
SWIFT_CLASS_NAMED("Centerable")
@interface DSFSparklineOverlayCenterableGraph : DSFSparklineDataSourceOverlay
/// Should the graph be centered at the zero line defined in the datasource?
@property (nonatomic) BOOL centeredAtZeroLine;
/// The primary color for the sparkline
@property (nonatomic) CGColorRef _Nullable primaryStrokeColor;
/// The primary fill color for the sparkline
@property (nonatomic, strong) id <DSFSparklineFillable> _Nullable primaryFill;
/// The color used to draw lines below the zero-line (if centeredAtZeroLine=true)
@property (nonatomic) CGColorRef _Nullable secondaryStrokeColor;
/// The fill color to use for parts of the graph below the zero-line (if centeredAtZeroLine=true)
@property (nonatomic, strong) id <DSFSparklineFillable> _Nullable secondaryFill;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDataSource:(DSFSparklineDataSource * _Nullable)dataSource SWIFT_UNAVAILABLE;
@end


/// A stackline graph
SWIFT_CLASS_NAMED("Stackline")
@interface DSFSparklineOverlayStackline : DSFSparklineOverlayCenterableGraph
/// The width for the line drawn on the graph
@property (nonatomic) CGFloat strokeWidth;
/// Interpolate a curve between the points
@property (nonatomic) NSUInteger barSpacing;
/// Draw a shadow under the line
@property (nonatomic, strong) NSShadow * _Nullable shadow;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
@end


@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end


/// A pie graph
SWIFT_CLASS_NAMED("Pie")
@interface DSFSparklineOverlayPie : DSFSparklineOverlayStaticDataSource
/// The palette to use when drawing the pie chart
@property (nonatomic, strong) DSFSparklinePalette * _Nonnull palette;
/// The stroke color for the pie chart
@property (nonatomic) CGColorRef _Nullable strokeColor;
/// The width of the stroke line
@property (nonatomic) CGFloat lineWidth;
/// Should the pie chart animate in?
@property (nonatomic, strong) AnimationStyle * _Nullable animationStyle;
/// Create
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
@end


@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end


/// A percent bar sparkline
SWIFT_CLASS_NAMED("PercentBar")
@interface DSFSparklineOverlayPercentBar : DSFSparklineOverlay
/// The value assigned to the percent bar. A value between 0.0 and 1.0
@property (nonatomic) CGFloat value;
/// The value that is displayed in the control.  This is the clamped version of <code>value</code>
@property (nonatomic, readonly) CGFloat displayValue;
/// The style to apply to the percent bar
@property (nonatomic, strong) DSFSparklinePercentBarStyle * _Nonnull displayStyle;
/// Animation style
@property (nonatomic, strong) AnimationStyle * _Nullable animationStyle;
/// Creator
- (nonnull instancetype)initWithStyle:(DSFSparklinePercentBarStyle * _Nonnull)style value:(CGFloat)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end


/// A line graph sparkline
SWIFT_CLASS_NAMED("Line")
@interface DSFSparklineOverlayLine : DSFSparklineOverlayCenterableGraph
/// The width for the line drawn on the graph
@property (nonatomic) CGFloat strokeWidth;
/// Interpolate a curve between the points
@property (nonatomic) BOOL interpolated;
/// Draw a shadow under the line
@property (nonatomic, strong) NSShadow * _Nullable shadow;
/// The size of the markers to draw. If the markerSize is less than 0, markers will not draw
@property (nonatomic) CGFloat markerSize;
/// An optional drawing function for custom drawing markers.
/// The <code>markerSize</code> value is used to determine the frameSize of each marker.
/// If <code>markerSize</code> is less than 1, this block will not be called.
/// Note that this function is called very frequently so make sure its performant!
@property (nonatomic, copy) void (^ _Nullable markerDrawingBlock)(CGContextRef _Nonnull, NSArray<DSFSparklineOverlayLineMarker *> * _Nonnull);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
@end


/// Representation of a marker within the sparkline
SWIFT_CLASS_NAMED("Marker")
@interface DSFSparklineOverlayLineMarker : NSObject
/// The raw data value for the marker
@property (nonatomic, readonly) CGFloat value;
/// The rect representing the marker
@property (nonatomic, readonly) CGRect rect;
/// If the graph is a centering graph, is this marker considered to be positive or negative?
@property (nonatomic, readonly) BOOL isPositiveValue;
- (nonnull instancetype)initWithValue:(CGFloat)value rect:(CGRect)rect isPositiveValue:(BOOL)isPositiveValue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end


/// A dot graph
SWIFT_CLASS_NAMED("Dot")
@interface DSFSparklineOverlayDot : DSFSparklineDataSourceOverlay
/// The number of vertical buckets to break the input data up into
@property (nonatomic) NSUInteger verticalDotCount;
/// The color to use when a ‘dot’ within the bar is on
@property (nonatomic) CGColorRef _Nonnull onColor;
/// The color to use when a ‘dot’ within the bar is off
@property (nonatomic) CGColorRef _Nullable offColor;
/// Are the values drawn from the top down?
@property (nonatomic) BOOL upsideDown;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (nonnull instancetype)new;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDataSource:(DSFSparklineDataSource * _Nullable)dataSource SWIFT_UNAVAILABLE;
@end


@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end

@class DSFSparklineFillColor;

/// A circular progress sparkline
SWIFT_CLASS_NAMED("CircularProgress")
@interface DSFSparklineOverlayCircularProgress : DSFSparklineOverlay
/// The value assigned to the percent bar. A value between 0.0 and 1.0
@property (nonatomic) CGFloat value;
/// Default track width
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat DefaultTrackWidth;)
+ (CGFloat)DefaultTrackWidth SWIFT_WARN_UNUSED_RESULT;
/// The width of the circular ring track
@property (nonatomic) CGFloat trackWidth;
/// The padding (inset) for drawing the ring
@property (nonatomic) CGFloat padding;
/// Default fill style
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DSFSparklineFillColor * _Nonnull DefaultFillStyle;)
+ (DSFSparklineFillColor * _Nonnull)DefaultFillStyle SWIFT_WARN_UNUSED_RESULT;
/// The fill style for the progress track
@property (nonatomic, strong) id <DSFSparklineFillable> _Nonnull fillStyle;
/// Default track color
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGColorRef _Nonnull DefaultTrackColor;)
+ (CGColorRef _Nonnull)DefaultTrackColor SWIFT_WARN_UNUSED_RESULT;
/// The color of the track background
@property (nonatomic) CGColorRef _Nonnull trackColor;
/// The icon appearing in the track at the top of the ring
@property (nonatomic) CGImageRef _Nullable icon;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
@end


@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end



@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end


/// A bar graph overlay
SWIFT_CLASS_NAMED("Bar")
@interface DSFSparklineOverlayBar : DSFSparklineOverlayCenterableGraph
/// The width for the line drawn on the graph (in pixels)
@property (nonatomic) NSUInteger strokeWidth;
/// The spacing between each bar (in pixels)
@property (nonatomic) NSUInteger barSpacing;
/// Draw a shadow under the line
@property (nonatomic, strong) NSShadow * _Nullable shadow;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
@end


@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end



@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end


SWIFT_CLASS_NAMED("ZeroLine")
@interface DSFSparklineOverlayZeroLine : DSFSparklineDataSourceOverlay
/// The color of the dotted line at the zero point on the y-axis
@property (nonatomic) CGColorRef _Nonnull strokeColor;
/// The width of the dotted line at the zero point on the y-axis
@property (nonatomic) CGFloat strokeWidth;
/// The line style for the dotted line. Use [] to specify a solid line.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull dashStyle;
- (nonnull instancetype)initWithDataSource:(DSFSparklineDataSource * _Nullable)dataSource strokeColor:(CGColorRef _Nonnull)strokeColor strokeWidth:(CGFloat)strokeWidth dashStyle:(NSArray<NSNumber *> * _Nonnull)dashStyle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDataSource:(DSFSparklineDataSource * _Nullable)dataSource SWIFT_UNAVAILABLE;
@end


@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end


/// An overlay that draws a color range on the sparkline
SWIFT_CLASS_NAMED("RangeHighlight")
@interface DSFSparklineOverlayRangeHighlight : DSFSparklineDataSourceOverlay
/// The color to fill the specified range
@property (nonatomic, strong) id <DSFSparklineFillable> _Nonnull fill;
/// objective-c compatible highlight range setting
- (void)setHighlightRangeWithLowerBound:(CGFloat)lowerBound upperBound:(CGFloat)upperBound;
- (nonnull instancetype)initWithLowerBound:(CGFloat)lowerBound upperBound:(CGFloat)upperBound fill:(id <DSFSparklineFillable> _Nonnull)fill OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDataSource:(DSFSparklineDataSource * _Nullable)dataSource SWIFT_UNAVAILABLE;
@end


@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end


/// An overlay that draws grid lines at specified vertical points on the sparkline
SWIFT_CLASS_NAMED("GridLines")
@interface DSFSparklineOverlayGridLines : DSFSparklineDataSourceOverlay
/// The color of the dotted line at the zero point on the y-axis
@property (nonatomic) CGColorRef _Nonnull strokeColor;
/// The width of the dotted line at the zero point on the y-axis
@property (nonatomic) CGFloat strokeWidth;
/// The line style for the dotted line. Use [] to specify a solid line.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull dashStyle;
/// The y-values within the range of the datasource for the lines
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull floatValues;
- (nonnull instancetype)initWithDataSource:(DSFSparklineDataSource * _Nullable)dataSource floatValues:(NSArray<NSNumber *> * _Nonnull)floatValues strokeColor:(CGColorRef _Nonnull)strokeColor strokeWidth:(CGFloat)strokeWidth dashStyle:(NSArray<NSNumber *> * _Nonnull)dashStyle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDataSource:(DSFSparklineDataSource * _Nullable)dataSource SWIFT_UNAVAILABLE;
@end


@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end



@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end



@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end



@interface DSFSparklineOverlay (SWIFT_EXTENSION(DSFSparkline))
@end


SWIFT_CLASS_NAMED("DataBar")
@interface DSFSparklineOverlayDataBar : DSFSparklineOverlayStaticDataSource
/// The maximum <em>total</em> value. If the datasource values total is greater than this value, it clips the display
@property (nonatomic) CGFloat maximumTotalValue;
/// The ‘undrawn’ color for the graph.
/// If a maximum total value is defined, and the datasource doesn’t completely fill the total, then
/// the empty section of the databar is drawn using this color.
@property (nonatomic) CGColorRef _Nullable unsetColor;
/// The stroke color for the line(s) to be drawn between each segment of the databar.
@property (nonatomic) CGColorRef _Nullable strokeColor;
/// The width of the stroke line to be drawn between each segment of the databar.  if 0, no stroke is drawn
@property (nonatomic) CGFloat lineWidth;
/// The palette to use when drawing the databar
@property (nonatomic, strong) DSFSparklinePalette * _Nonnull palette;
/// The animation style
@property (nonatomic, strong) AnimationStyle * _Nullable animationStyle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer OBJC_DESIGNATED_INITIALIZER;
@end


/// A sparkline that draws a percent bar
SWIFT_CLASS("_TtC12DSFSparkline31DSFSparklinePercentBarGraphView")
@interface DSFSparklinePercentBarGraphView : DSFSparklineSurfaceView
/// The initial value to display in the percent bar
@property (nonatomic) CGFloat value;
/// The style for presenting the percent bar
@property (nonatomic, strong) DSFSparklinePercentBarStyle * _Nonnull displayStyle;
/// The corner radius for the bar
@property (nonatomic) CGFloat cornerRadius;
/// Should the control display a text label for the percent bar
@property (nonatomic) BOOL showLabel;
/// The background of the bar color for the percent bar chart
@property (nonatomic, strong) UIColor * _Nonnull underBarColor;
/// The color for text displayed on the background
@property (nonatomic, strong) UIColor * _Nonnull underBarTextColor;
/// The bar color for the percent bar chart
@property (nonatomic, strong) UIColor * _Nonnull barColor;
/// The color for text displayed on the bar
@property (nonatomic, strong) UIColor * _Nonnull barTextColor;
/// The name of the font to use when drawing the percent bar label
@property (nonatomic, copy) NSString * _Nullable fontName;
/// The size (in points) of the font to use when drawing the percent bar label
@property (nonatomic) CGFloat fontSize;
/// The left inset for the bar
@property (nonatomic) CGFloat leftInset;
/// The top inset for the bar
@property (nonatomic) CGFloat topInset;
/// The right inset for the bar
@property (nonatomic) CGFloat rightInset;
/// The bottom inset for the bar
@property (nonatomic) CGFloat bottomInset;
@property (nonatomic, strong) AnimationStyle * _Nullable animationStyle;
/// Initializer
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end




/// A sparkline that draws a simple pie chart
SWIFT_CLASS("_TtC12DSFSparkline24DSFSparklinePieGraphView")
@interface DSFSparklinePieGraphView : DSFSparklineSurfaceView
/// The data to be displayed in the pie.
/// The values become a percentage of the total value stored within the
/// dataStore, and as such each value ends up being drawn as a fraction of the total.
/// So for example, if you want the pie chart to represent the number of red cars vs. number of
/// blue cars, you just set the values directly.
@property (nonatomic, strong) DSFSparklineStaticDataSource * _Nonnull dataSource;
/// The stroke color for the pie chart
@property (nonatomic, strong) UIColor * _Nullable strokeColor;
/// The width of the stroke line
@property (nonatomic) CGFloat lineWidth;
/// Should the pie chart animate in?
@property (nonatomic, strong) AnimationStyle * _Nullable animationStyle;
/// The palette to use when drawing the pie chart
@property (nonatomic, strong) DSFSparklinePalette * _Nonnull palette;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// A stack line sparkline type
SWIFT_CLASS("_TtC12DSFSparkline30DSFSparklineStackLineGraphView")
@interface DSFSparklineStackLineGraphView : DSFSparklineZeroLineGraphView
/// The width for the line drawn on the graph
@property (nonatomic) CGFloat lineWidth;
/// Shade the area under the line
@property (nonatomic) BOOL lineShading;
/// Draw a shadow under the line
@property (nonatomic) BOOL shadowed;
/// Should the graph be centered at the zero line?
@property (nonatomic) BOOL centeredAtZeroLine;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)colorDidChange;
@end



/// A sparkline graph that displays solid color bars with a gradient (like the climate graph)
SWIFT_CLASS("_TtC12DSFSparkline28DSFSparklineStripesGraphView")
@interface DSFSparklineStripesGraphView : DSFSparklineDataSourceView
@property (nonatomic) BOOL integral;
/// The spacing (in pixels) between each bar
@property (nonatomic) NSUInteger barSpacing;
/// The color gradient to use when rendering.
/// Note that transparent gradients display strangely and not as I would expect them to.
/// Stick with solid colors in your gradient for the current time.
@property (nonatomic, strong) DSFGradientBucket * _Nullable gradient;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end





@interface DSFSparklineSurface (SWIFT_EXTENSION(DSFSparkline))
@end




@interface DSFSparklineSurfaceView (SWIFT_EXTENSION(DSFSparkline))
- (void)layoutSubviews;
- (void)didMoveToWindow;
@end


/// A tablet-style sparkline. Similar to win/loss except rendering as a row of filled/unfilled circles
SWIFT_CLASS("_TtC12DSFSparkline27DSFSparklineTabletGraphView")
@interface DSFSparklineTabletGraphView : DSFSparklineDataSourceView
/// The width of the stroke for the tablet
@property (nonatomic) CGFloat lineWidth;
/// The spacing (in pixels) between each bar
@property (nonatomic) CGFloat barSpacing;
/// The color to draw the ‘win’ boxes
@property (nonatomic, strong) UIColor * _Nonnull winColor;
/// The color to draw the ‘loss’ boxes
@property (nonatomic, strong) UIColor * _Nonnull lossColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC12DSFSparkline28DSFSparklineWinLossGraphView")
@interface DSFSparklineWinLossGraphView : DSFSparklineDataSourceView
/// The line width (in pixels) to use when drawing the border of each bar
@property (nonatomic) NSUInteger lineWidth;
/// The spacing (in pixels) between each bar
@property (nonatomic) NSUInteger barSpacing;
/// The color to draw the ‘win’ boxes
@property (nonatomic, strong) UIColor * _Nonnull winColor;
/// The color to draw the ‘loss’ boxes
@property (nonatomic, strong) UIColor * _Nonnull lossColor;
/// The color to draw the ‘tie’ boxes
@property (nonatomic, strong) UIColor * _Nullable tieColor;
@property (nonatomic, strong) UIColor * _Nullable centerlineColor;
@property (nonatomic) CGFloat centerlineWidth;
/// A string representation of the line dash lengths for the center line, eg. “1,3,4,2”.
/// If you want a solid line, specify “-”
/// Primarily used for Interface Builder integration
@property (nonatomic, copy) NSString * _Nonnull centerlineDashStyleString;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



/// A sparkline that draws a percent bar
SWIFT_CLASS("_TtC12DSFSparkline31DSFSparklineWiperGaugeGraphView")
@interface DSFSparklineWiperGaugeGraphView : DSFSparklineSurfaceView
/// The initial value to display in the percent bar
@property (nonatomic) CGFloat value;
@property (nonatomic, strong) DSFSparklineValueBasedFill * _Nonnull valueColor;
@property (nonatomic, strong) AnimationStyle * _Nullable animationStyle;
@property (nonatomic, strong) UIColor * _Nonnull gaugeUpperArcColor;
@property (nonatomic, strong) UIColor * _Nonnull valueBackgroundColor;
/// The color of the pointer component of the gauge
@property (nonatomic, strong) UIColor * _Nonnull gaugePointerColor;
/// The color of the pointer component of the gauge
@property (nonatomic, strong) UIColor * _Nullable gaugeBackgroundColor;
/// Initializer
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// Initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end












@interface DSFSparklineDataSource (SWIFT_EXTENSION(DSFSparkline))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface DSFSparklineDataSource (SWIFT_EXTENSION(DSFSparkline))
/// Add a new value. If there are more values than the window size, the oldest value is discarded
- (BOOL)pushWithValue:(CGFloat)value;
/// Add a vector of new values. Equivalent to push(values[0]), push(values[1]), push(values[2]) etc.
- (void)pushWithValues:(NSArray<NSNumber *> * _Nonnull)values;
/// Set the sparkline data to the specified values. The window size is changed to reflect the extent of the input data
- (void)setWithValues:(NSArray<NSNumber *> * _Nonnull)values;
/// Reset the data to the lower bound for all data points in the window
- (void)reset;
@end



@interface DSFSparklineDataSource (SWIFT_EXTENSION(DSFSparkline))
/// Returns the lower bound for the current set of values.  If no values are present, returns CGFloat.greatestFiniteMagnitude
@property (nonatomic, readonly) CGFloat lowerBound;
/// Returns the upper bound for the current set of values.  If no values are present, returns CGFloat.greatestFiniteMagnitude
@property (nonatomic, readonly) CGFloat upperBound;
/// Set a range using discrete upper and lower bounds
- (void)setRangeWithLowerBound:(CGFloat)lowerBound upperBound:(CGFloat)upperBound;
/// Set a range using discrete upper and lower bounds, drawing a line at the ‘zero’ point within the range
- (void)setRangeWithLowerBound:(CGFloat)lowerBound upperBound:(CGFloat)upperBound zeroLinePoint:(CGFloat)zeroLinePoint;
/// Remove the range restrictions for the data source
- (void)resetRange;
@end


@interface DSFSparklineDataSource (SWIFT_EXTENSION(DSFSparkline))
/// The series of data points with the most recent being the last array entry
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull data;
/// Return the raw values in the data source scaled from 0.0 -> 1.0
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull normalized;
/// The number of data points to display in the sparkline
@property (nonatomic) NSUInteger windowSize;
/// The number of unfilled buckets in the sparkline
@property (nonatomic, readonly) NSUInteger emptyValueCount;
/// The ‘zero’ line for drawing the horizontal line. Should be in the range lowerBound ..< upperBound
@property (nonatomic) CGFloat zeroLineValue;
@end




@interface DSFGradientBucket (SWIFT_EXTENSION(DSFSparkline))
@end


/// A gradient ‘post’ represents an absolute color at a fractional point within the gradient.
SWIFT_CLASS_NAMED("Post")
@interface DSFGradientBucketPost : NSObject
/// Create a post
/// \param color the color for the post
///
/// \param location the location for the color within the gradient (0.0 -> 1.0)
///
- (nonnull instancetype)initWithColor:(CGColorRef _Nonnull)color location:(CGFloat)location OBJC_DESIGNATED_INITIALIZER;
/// Make a copy of this gradient bucket post
- (DSFGradientBucketPost * _Nonnull)copyPost SWIFT_WARN_UNUSED_RESULT;
/// Create a post
/// \param r the red component (0.0 -> 1.0)
///
/// \param g the green component (0.0 -> 1.0)
///
/// \param b the blue component (0.0 -> 1.0)
///
/// \param location the location for the color within the gradient (0.0 -> 1.0)
///
- (nonnull instancetype)initWithR:(CGFloat)r g:(CGFloat)g b:(CGFloat)b location:(CGFloat)location OBJC_DESIGNATED_INITIALIZER;
/// Create a post
/// \param r the red component (0.0 -> 1.0)
///
/// \param g the green component (0.0 -> 1.0)
///
/// \param b the blue component (0.0 -> 1.0)
///
/// \param a the alpha component (0.0 -> 1.0)
///
/// \param location the location for the color within the gradient (0.0 -> 1.0)
///
- (nonnull instancetype)initWithR:(CGFloat)r g:(CGFloat)g b:(CGFloat)b a:(CGFloat)a location:(CGFloat)location OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface DSFSparklineHighlightRangeDefinition (SWIFT_EXTENSION(DSFSparkline))
@property (nonatomic) CGFloat lowerBound;
@property (nonatomic) CGFloat upperBound;
@end





@interface NSShadow (SWIFT_EXTENSION(DSFSparkline))
- (nonnull instancetype)initWithBlurRadius:(CGFloat)blurRadius offset:(CGSize)offset color:(UIColor * _Nonnull)color;
@end



@interface DSFSparklineOverlayPercentBar (SWIFT_EXTENSION(DSFSparkline))
- (void)layoutSublayers;
@end






@interface DSFSparklineStaticDataSource (SWIFT_EXTENSION(DSFSparkline))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end




@interface UIView (SWIFT_EXTENSION(DSFSparkline))
- (UIImage * _Nonnull)snapshot SWIFT_WARN_UNUSED_RESULT;
@end





@interface DSFSparklineOverlayWiperGauge (SWIFT_EXTENSION(DSFSparkline))
- (void)layoutSublayers;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif
